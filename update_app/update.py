import json
import os
import shutil
import time

import psutil
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer
from PyQt5.QtGui import QColor, QIcon
from PyQt5.QtSvg import QSvgWidget
from PyQt5.QtWidgets import (
    QApplication, QWidget, QLabel, QPushButton,
    QVBoxLayout, QGraphicsColorizeEffect
)

import sys
from pathlib import Path

def get_directory():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤"""
    if getattr(sys, 'frozen', False):
        if hasattr(sys, '_MEIPASS'):
            return sys._MEIPASS  # onefile —Ä–µ–∂–∏–º
        base = Path(sys.executable).parent
        internal = base / '_internal'
        return internal if internal.exists() else base
    return Path(__file__).parent  # —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞)

def get_path(*path_parts):
    """–°—Ç—Ä–æ–∏—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å, –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–π –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö"""
    return str(get_directory() / Path(*path_parts))

def get_resource_path(relative_path):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤ –≤–Ω—É—Ç—Ä–∏/—Å–Ω–∞—Ä—É–∂–∏ EXE"""
    if getattr(sys, 'frozen', False):
        if hasattr(sys, '_MEIPASS'):
            # –†–µ–∂–∏–º onefile: —Ä–µ—Å—É—Ä—Å—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ _MEIPASS
            base_path = Path(sys._MEIPASS)
        else:
            # –†–µ–∂–∏–º onedir: —Ä–µ—Å—É—Ä—Å—ã –≤ –ø–∞–ø–∫–µ —Å EXE
            base_path = Path(sys.executable).parent
    else:
        # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        base_path = Path(__file__).parent

    return base_path / relative_path

def get_base_directory():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ"""
    if getattr(sys, 'frozen', False):
        # –†–µ–∂–∏–º exe (onefile –∏–ª–∏ onedir)
        if hasattr(sys, '_MEIPASS'):
            # onefile —Ä–µ–∂–∏–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞–ø–∫—É —Å exe, –∞ –Ω–µ –≤—Ä–µ–º–µ–Ω–Ω—É—é
            return Path(sys.executable).parent
        # onedir —Ä–µ–∂–∏–º
        return Path(sys.executable).parent
    # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    return Path(__file__).parent

class UpdateThread(QThread):
    status_update = pyqtSignal(str, int)
    update_complete = pyqtSignal(bool)

    def __init__(self, root_dir, base_dir, update_pack_dir):
        super().__init__()
        self.root_dir = root_dir
        self.base_dir = base_dir
        self.update_pack_dir = update_pack_dir

    def run(self):
        # –ñ–¥—ë–º –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
        self.status_update.emit("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Assistant.exe...", 0)

        for proc in psutil.process_iter(['name']):
            if proc.info['name'] == 'Assistant.exe':
                try:
                    proc.kill()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
                    self.update_complete.emit(False)
                    return

        # üî• 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫—Ä—ã—Ç (–∂–¥–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 5 —Å–µ–∫)
        for _ in range(5):
            if not any(p.info['name'] == 'Assistant.exe' for p in psutil.process_iter(['name'])):
                break
            time.sleep(1)
        else:
            self.status_update.emit("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å Assistant.exe!", 0)
            self.update_complete.emit(False)
            return

        self.status_update.emit("–£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤...", 20)
        self.delete_old_files()

        self.status_update.emit("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...", 40)
        if self.copy_new_files():
            self.status_update.emit("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", 100)
            self.update_complete.emit(True)
        else:
            self.status_update.emit("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è!", 0)
            self.update_complete.emit(False)

    def delete_old_files(self):
        preserved = ["user_settings", "update", "update_pack"]

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ self.root_dir (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
        for item in os.listdir(self.root_dir):
            full_path = os.path.join(self.root_dir, item)
            if os.path.isdir(full_path):
                if os.path.basename(full_path) not in preserved:
                    shutil.rmtree(full_path, ignore_errors=True)
            elif os.path.isfile(full_path):
                if os.path.basename(full_path) != "Assistant.exe":
                    try:
                        os.remove(full_path)
                    except Exception:
                        pass

        parent_dir = os.path.dirname(self.root_dir)  # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É
        assistant_exe_path = os.path.join(parent_dir, "Assistant.exe")

        if os.path.isfile(assistant_exe_path):
            try:
                os.remove(assistant_exe_path)
                print(f"–£–¥–∞–ª—ë–Ω {assistant_exe_path}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {assistant_exe_path}: {e}")

    def copy_new_files(self):
        try:
            # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ _internal –≤–Ω—É—Ç—Ä–∏ update_pack
            update_internal_dir = os.path.join(self.update_pack_dir, "_internal")

            # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ _internal –∏–∑ update_pack –≤ —Ü–µ–ª–µ–≤—É—é _internal, –∫—Ä–æ–º–µ user_settings
            if os.path.exists(update_internal_dir):
                for item in os.listdir(update_internal_dir):
                    if item == "user_settings":
                        continue
                    if item == "Update.exe":
                        continue

                    src = os.path.join(update_internal_dir, item)
                    dst = os.path.join(self.root_dir, item)

                    # –ü—Ä–æ–±—É–µ–º 3 —Ä–∞–∑–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                    for _ in range(5):  # 5 –ø–æ–ø—ã—Ç–æ–∫
                        try:
                            if os.path.isdir(src):
                                shutil.copytree(src, dst, dirs_exist_ok=True)
                            else:
                                # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
                                if os.path.exists(dst):
                                    try:
                                        os.rename(dst, dst + ".old")
                                    except:
                                        pass
                                shutil.copy2(src, dst)
                            break
                        except Exception:
                            time.sleep(1)

            # –ö–æ–ø–∏—Ä—É–µ–º Assistant.exe –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
            assistant_src = os.path.join(self.update_pack_dir, "Assistant.exe")
            if os.path.exists(assistant_src):
                parent_dir = os.path.dirname(self.root_dir)  # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞
                assistant_dst = os.path.join(parent_dir, "Assistant.exe")
                shutil.copy2(assistant_src, assistant_dst)

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False


class UpdateWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.styles = None
        self.style_path = get_path('color.json')
        self.svg_path = get_path("owl_start.svg")
        self.init_ui()
        self.load_and_apply_styles()
        self.thread = None
        self.start_update_process()

    def init_ui(self):
        self.setWindowIcon(QIcon(get_path('icon.ico')))
        self.setFixedSize(300, 300)
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)

        screen_geometry = QApplication.primaryScreen().availableGeometry()
        self.move(
            int((screen_geometry.width() - self.width()) / 2),
            int((screen_geometry.height() - self.height()) / 2)
        )
        layout = QVBoxLayout()
        layout.setAlignment(Qt.AlignCenter)
        layout.setSpacing(10)

        self.svg_image = QSvgWidget()
        self.svg_image.load(self.svg_path)
        self.svg_image.setFixedSize(180, 150)
        self.svg_image.setStyleSheet("""
                            background: transparent;
                            border: none;
                            outline: none;
                        """)
        self.color_svg = QGraphicsColorizeEffect()
        self.svg_image.setGraphicsEffect(self.color_svg)
        layout.addWidget(self.svg_image, alignment=Qt.AlignCenter)

        # –¢–µ–∫—Å—Ç
        self.label = QLabel("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
        self.label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.label)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä
        self.progress = QLabel("‚ñà" * 20)

        layout.addWidget(self.progress, alignment=Qt.AlignCenter)

        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        self.error_button = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        self.error_button.clicked.connect(self.quit_application)
        self.error_button.hide()
        layout.addWidget(self.error_button, alignment=Qt.AlignCenter)

        self.setLayout(layout)

    def start_update_process(self):
        if self.thread is not None:
            return  # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        self.label.setText("–ü—Ä–æ–≤–µ—Ä–∫–∞...")

        root_dir = get_base_directory()  # –ö–æ—Ä–µ–Ω—å (Assistant/)
        update_pack_dir = root_dir / "update_pack"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å –∫ update_pack

        # --- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ update_pack ---
        if not os.path.exists(update_pack_dir):
            self.label.setText("–ü–∞–ø–∫–∞ update_pack –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            self.show_error("–ü–∞–ø–∫–∞ update_pack –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        if self.is_folder_empty(update_pack_dir):
            self.label.setText("–ü–∞–ø–∫–∞ update_pack –ø—É—Å—Ç–∞")
            self.show_error("–ü–∞–ø–∫–∞ update_pack –ø—É—Å—Ç–∞")
            return

        self.label.setText("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ...")
        self.thread = UpdateThread(
            root_dir=root_dir,
            base_dir=os.path.dirname(root_dir),
            update_pack_dir=update_pack_dir
        )
        self.thread.status_update.connect(self.set_status)
        self.thread.update_complete.connect(self.on_update_complete)
        self.thread.start()

    def is_folder_empty(self, folder):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Å–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        visible_files = [f for f in os.listdir(folder) if not f.startswith('.')]
        return len(visible_files) == 0

    def on_update_complete(self, success):
        if success:
            QTimer.singleShot(1000, self.run_main_app)
        else:
            self.show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É.")

    def run_main_app(self):
        main_app = os.path.join(os.path.dirname(get_base_directory()), "Assistant.exe")
        if os.path.exists(main_app):
            os.startfile(main_app)
        self.close()

    def set_status(self, text, progress=None):
        self.label.setText(text)
        if progress is not None:
            self.progress.setText("‚ñà" * int(progress / 5))

    def show_error(self, message):
        self.label.setText(message)
        self.error_button.show()

    def quit_application(self):
        sys.exit(1)

    def load_and_apply_styles(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∏–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Ö –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        """
        try:
            with open(self.style_path, 'r') as file:
                self.styles = json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            try:
                with open(self.default_preset_style, 'r') as default_file:
                    self.styles = json.load(default_file)
            except (FileNotFoundError, json.JSONDecodeError):
                self.styles = {}

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.apply_styles()
        self.apply_color_svg(self.style_path, self.svg_image)
        self.apply_progressbar()

    def get_color_from_border(self, widget_key):
        if widget_key in self.styles:
            style = self.styles[widget_key]
            border_value = style.get("border", "")
            import re
            match = re.search(r'#(?:[0-9a-fA-F]{3}){2}|rgb$.*?$|rgba$.*?$',
                              border_value)
            if match:
                return match.group(0)
        return "#cccccc"

    def apply_progressbar(self):
        color = self.get_color_from_border("QPushButton")

        progress_style = f"""
            QProgressBar {{
                border-radius: 5px;
                text-align:center
            }}
            QProgressBar::chunk {{
                background-color: {color}
            }}
        """

        self.progress.setStyleSheet(progress_style)

    def apply_styles(self):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º objectName –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤
        if hasattr(self, 'central_widget'):
            self.central_widget.setObjectName("CentralWidget")
        if hasattr(self, 'title_bar_widget'):
            self.title_bar_widget.setObjectName("TitleBar")
        if hasattr(self, 'container'):
            self.title_bar_widget.setObjectName("ConfirmDialogContainer")
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ —Ç–µ–∫—É—â–µ–º—É –æ–∫–Ω—É
        style_sheet = ""
        for widget, styles in self.styles.items():
            if widget.startswith("Q"):  # –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, QMainWindow, QPushButton)
                selector = widget
            else:  # –î–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤ —Å objectName (–Ω–∞–ø—Ä–∏–º–µ—Ä, TitleBar, CentralWidget)
                selector = f"#{widget}"

            style_sheet += f"{selector} {{\n"
            for prop, value in styles.items():
                style_sheet += f"    {prop}: {value};\n"
            style_sheet += "}\n"

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞
        self.setStyleSheet(style_sheet)

    def format_style(self, style_dict):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∏–ª—è –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è setStyleSheet"""
        return '; '.join(f"{key}: {value}" for key, value in style_dict.items())

    def apply_color_svg(self, style_file: str, svg_widget: QSvgWidget, strength: float = 0.99) -> None:
        """–ß–∏—Ç–∞–µ—Ç —Ü–≤–µ—Ç –∏–∑ JSON-—Ñ–∞–π–ª–∞ —Å—Ç–∏–ª–µ–π"""
        with open(style_file) as f:
            styles = json.load(f)

        if "TitleBar" in styles and "border-bottom" in styles["TitleBar"]:
            border_parts = styles["TitleBar"]["border-bottom"].split()
            for part in border_parts:
                if part.startswith('#'):
                    color_effect = QGraphicsColorizeEffect()
                    color_effect.setColor(QColor(part))
                    svg_widget.setGraphicsEffect(color_effect)
                    color_effect.setStrength(strength)
                    break

def main():
    app = QApplication(sys.argv)
    window = UpdateWindow()
    window.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()